{"version":3,"sources":["Card.js","cardFunctions.js","Cards.js","App.js","index.js"],"names":["Card","props","_React$useState","React","useState","_React$useState2","Object","slicedToArray","selected","setSelected","handleSelectedCards","function","selectedCards","card","number","react_default","a","createElement","style","border","borderRadius","alt","src","concat","onClick","includes","allCards","playCards","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","shuffle","sameCount","sameColor","sameShape","sameFill","availableCards","Array","from","cards","push","firstCard","splice","secondCard","thirdCard","console","log","getCards","getCardNumber","indexOf","Cards","alert","window","location","reload","checkWin","map","index","src_Card","key","App","className","src_Cards","ReactDOM","createRoot","document","getElementById","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.af6c8018.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Card(props) {\n  const [selected, setSelected] = React.useState(false);\n\n  let handleSelectedCards = props.function\n  let selectedCards = props.selectedCards\n  let card = props.card;\n  let number = props.number;\n\n  function handleClick() {\n    setSelected(false)\n    handleSelectedCards(card)\n    if (selectedCards.includes(card)) {\n      setSelected(true)\n    }\n  }\n\n  return (\n    <img\n      style={{\n        border: selected ? \"2px dotted #ccc\" : \"2px dotted #fff\",\n        borderRadius: \"10px\",\n      }}\n      alt=\"card\"\n      src={`./assets/${number}.png`}\n      onClick={handleClick}\n    ></img>\n  );\n}\n\nexport default Card;\n","const allCards = [\n    [0, 0, 0, 0],\n    [1, 0, 0, 0],\n    [2, 0, 0, 0],\n    [0, 1, 0, 0],\n    [1, 1, 0, 0],\n    [2, 1, 0, 0],\n    [0, 2, 0, 0],\n    [1, 2, 0, 0],\n    [2, 2, 0, 0],\n    [0, 0, 1, 0],\n    [1, 0, 1, 0],\n    [2, 0, 1, 0],\n    [0, 1, 1, 0],\n    [1, 1, 1, 0],\n    [2, 1, 1, 0],\n    [0, 2, 1, 0],\n    [1, 2, 1, 0],\n    [2, 2, 1, 0],\n    [0, 0, 2, 0],\n    [1, 0, 2, 0],\n    [2, 0, 2, 0],\n    [0, 1, 2, 0],\n    [1, 1, 2, 0],\n    [2, 1, 2, 0],\n    [0, 2, 2, 0],\n    [1, 2, 2, 0],\n    [2, 2, 2, 0],\n    [0, 0, 0, 1],\n    [1, 0, 0, 1],\n    [2, 0, 0, 1],\n    [0, 1, 0, 1],\n    [1, 1, 0, 1],\n    [2, 1, 0, 1],\n    [0, 2, 0, 1],\n    [1, 2, 0, 1],\n    [2, 2, 0, 1],\n    [0, 0, 1, 1],\n    [1, 0, 1, 1],\n    [2, 0, 1, 1],\n    [0, 1, 1, 1],\n    [1, 1, 1, 1],\n    [2, 1, 1, 1],\n    [0, 2, 1, 1],\n    [1, 2, 1, 1],\n    [2, 2, 1, 1],\n    [0, 0, 2, 1],\n    [1, 0, 2, 1],\n    [2, 0, 2, 1],\n    [0, 1, 2, 1],\n    [1, 1, 2, 1],\n    [2, 1, 2, 1],\n    [0, 2, 2, 1],\n    [1, 2, 2, 1],\n    [2, 2, 2, 1],\n    [0, 0, 0, 2],\n    [1, 0, 0, 2],\n    [2, 0, 0, 2],\n    [0, 1, 0, 2],\n    [1, 1, 0, 2],\n    [2, 1, 0, 2],\n    [0, 2, 0, 2],\n    [1, 2, 0, 2],\n    [2, 2, 0, 2],\n    [0, 0, 1, 2],\n    [1, 0, 1, 2],\n    [2, 0, 1, 2],\n    [0, 1, 1, 2],\n    [1, 1, 1, 2],\n    [2, 1, 1, 2],\n    [0, 2, 1, 2],\n    [1, 2, 1, 2],\n    [2, 2, 1, 2],\n    [0, 0, 2, 2],\n    [1, 0, 2, 2],\n    [2, 0, 2, 2],\n    [0, 1, 2, 2],\n    [1, 1, 2, 2],\n    [2, 1, 2, 2],\n    [0, 2, 2, 2],\n    [1, 2, 2, 2],\n    [2, 2, 2, 2],\n  ];\n\nfunction getCards() {\n    let availableCards = Array.from(allCards);\n    let cards = [];\n  \n    let sameCount = false;\n    let sameColor = false;\n    let sameShape = false;\n    let sameFill = false;\n  \n    //pick a random card\n    let randomIndex = Math.floor(Math.random() * availableCards.length);\n    cards.push(availableCards[randomIndex]);\n    let firstCard = availableCards[randomIndex];\n    availableCards.splice(randomIndex, 1);\n  \n    //pick a second random card\n    randomIndex = Math.floor(Math.random() * availableCards.length);\n    cards.push(availableCards[randomIndex]);\n    let secondCard = availableCards[randomIndex];\n    availableCards.splice(randomIndex, 1);\n  \n    //set the same values\n    sameCount = secondCard[0] === firstCard[0];\n    sameColor = secondCard[1] === firstCard[1];\n    sameShape = secondCard[2] === firstCard[2];\n    sameFill = secondCard[3] === firstCard[3];\n  \n    //pick a third random card\n    while (cards.length < 3) {\n      randomIndex = Math.floor(Math.random() * availableCards.length);\n      let thirdCard = availableCards[randomIndex];\n  \n      //check if the third card is the same as the first or second card\n      if ((thirdCard[0] === firstCard[0]) !== sameCount) {\n        continue;\n      }\n      if ((thirdCard[1] === firstCard[1]) !== sameColor) {\n        continue;\n      }\n      if ((thirdCard[2] === firstCard[2]) !== sameShape) {\n        continue;\n      }\n      if ((thirdCard[3] === firstCard[3]) !== sameFill) {\n        continue;\n      }\n      if ((thirdCard[0] === secondCard[0]) !== sameCount) {\n        continue;\n      }\n      if ((thirdCard[1] === secondCard[1]) !== sameColor) {\n        continue;\n      }\n      if ((thirdCard[2] === secondCard[2]) !== sameShape) {\n        continue;\n      }\n      if ((thirdCard[3] === secondCard[3]) !== sameFill) {\n        continue;\n      }\n  \n      cards.push(thirdCard);\n      availableCards.splice(randomIndex, 1);\n    }\n  \n    while (cards.length < 12) {\n      randomIndex = Math.floor(Math.random() * availableCards.length);\n      cards.push(availableCards[randomIndex]);\n      availableCards.splice(randomIndex, 1);\n    }\n  \nconsole.log(sameCount, sameColor, sameShape, sameFill);\n\n    return cards;\n  }\n  \n  function shuffle(array) {\n    let currentIndex = array.length,\n      temporaryValue,\n      randomIndex;\n  \n    while (0 !== currentIndex) {\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n  \n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n  \n    return array;\n  }\n\n  export { allCards, getCards, shuffle };","import \"./Cards.css\";\nimport Card from \"./Card.js\";\nimport React from \"react\";\nimport { allCards, getCards, shuffle } from \"./cardFunctions.js\";\n\nlet playCards = shuffle(getCards());\n\nfunction getCardNumber(card) {\n  return allCards.indexOf(card) + 1;\n}\n\nfunction checkWin(cards) {\n  let firstCard = cards[0]\n  let secondCard = cards[1]\n  let thirdCard = cards[2]\n\n  console.log(firstCard, secondCard, thirdCard)\n\n  let sameCount = firstCard[0] === secondCard[0]\n  let sameColor = firstCard[1] === secondCard[1]\n  let sameShape = firstCard[2] === secondCard[2]\n  let sameFill = firstCard[3] === secondCard[3]\n\n  if ((thirdCard[0] === firstCard[0]) !== sameCount) {\n    return;\n  }\n  if ((thirdCard[1] === firstCard[1]) !== sameColor) {\n    return;\n  }\n  if ((thirdCard[2] === firstCard[2]) !== sameShape) {\n    return;\n  }\n  if ((thirdCard[3] === firstCard[3]) !== sameFill) {\n    return;\n  }\n  if ((thirdCard[0] === secondCard[0]) !== sameCount) {\n    return;\n  }\n  if ((thirdCard[1] === secondCard[1]) !== sameColor) {\n    return;\n  }\n  if ((thirdCard[2] === secondCard[2]) !== sameShape) {\n    return;\n  }\n  if ((thirdCard[3] === secondCard[3]) !== sameFill) {\n    return;\n  }\n\n  alert(\"You win!\");\n  //refresh the page\n  window.location.reload();\n}\n\nfunction Cards() {\n  let selectedCards = [];\n\n  function handleSelectedCards(card) {\n    if (selectedCards.includes(card)) {\n      selectedCards.splice(selectedCards.indexOf(card), 1);\n      return\n    }\n    if (selectedCards.length > 2) {\n      return\n    }\n    selectedCards.push(card);\n    if (selectedCards.length > 2) {\n      checkWin(selectedCards);\n    }\n  }\n\n  return playCards.map((card, index) => {\n    return <Card selectedCards={selectedCards} function={handleSelectedCards} key={index} card={card} number={getCardNumber(card)} />;\n  });\n}\n\nexport default Cards;\n","import \"./App.css\";\nimport Cards from \"./Cards\";\nimport React from \"react\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">Find The Set</header>\n      <div className=\"App-body\">\n        <Cards />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}